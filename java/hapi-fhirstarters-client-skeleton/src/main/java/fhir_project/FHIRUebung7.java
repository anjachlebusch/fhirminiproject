package fhir_project;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.rest.api.MethodOutcome;
import ca.uhn.fhir.rest.client.api.IGenericClient;
import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;
import org.hl7.fhir.r4.model.*;

import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class FHIRUebung7 {
    public static void main(String[] args) {
        // Create a client
        FhirContext ctx = FhirContext.forR4();
        IGenericClient client = ctx.newRestfulGenericClient("https://funke.imi.uni-luebeck.de/public/fhir");

       // Create a patient
       // Version from Hannes
       // Empty Patient Instance
       Patient antonie = new Patient();

       // Identifier
       Identifier identifier = new Identifier();
       identifier.setValue("1234567890");
       identifier.setSystem("http://kh-uzl.de/fhir/patients");
       antonie.addIdentifier(identifier);

       // Official Name
       HumanName gruenlich = new HumanName();
       gruenlich.addGiven("Antonie");
       gruenlich.setFamily("Grünlich");
       gruenlich.setUse(HumanName.NameUse.OFFICIAL);
       antonie.addName(gruenlich);

       // Birthday
       Calendar cal = Calendar.getInstance();
       // CAVE: Java integer starts by 0!
       cal.set(1827, 7, 6);
       antonie.setBirthDate(cal.getTime());

       //Birthplace
       antonie.addExtension().setUrl("http://hl7.org/fhir/StructureDefinition/patient-birthPlace")
          .setValue(new StringType("Hamburg"));

       //Address
       antonie.addAddress(
          new Address()
             .setLine(Collections.singletonList(new StringType("Stresemannstraße 12")))
             .setPostalCode("22179")
             .setCity("Hamburg")
       );

       //Passport number
       antonie.addExtension().setUrl("http://acme.org/fhir/StructureDefinition/passport-number")
        .setValue(new StringType("12345ABC"));

       //Riskfactors for immunization
       //TODO: do we need this???
       RiskAssessment risikoFaktoren = new RiskAssessment();

       //Blood type
       Observation bloodType = new Observation()
          .setStatus(Observation.ObservationStatus.FINAL)
          .setCategory(
             Collections.singletonList(new CodeableConcept().setCoding(
                Collections.singletonList(new Coding("http://terminology.hl7.org/CodeSystem/observation-category", "Laboratory", "The results of observations generated by laboratories. Laboratory results are typically generated by laboratories providing analytic services in areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology (including digital pathology), microbiology, and/or virology. These observations are based on analysis of specimens obtained from the patient and submitted to the laboratory."))
             ))
          )
          .setCode(
             new CodeableConcept().setCoding(
                Collections.singletonList(new Coding("http ://loinc.org", "882-1", "ABO and Rh group [Type] in Blood"))
             )
          )
          .setSubject(new Reference(antonie))
          .setEffective(new DateTimeType(new GregorianCalendar(1900, Calendar.APRIL, 12)))
          .setValue(new CodeableConcept().setCoding(
             Arrays.asList(new Coding("http://snomed.info/sct", "112144000", "Blood group A (finding)"),
             new Coding("http://snomed.info/sct", "165747007", "RhD positive (finding)")))
          );


       // Impfung
       Immunization Impfung = new Immunization();
       Impfung.setPatient(new Reference(antonie))
          .setVaccineCode(new CodeableConcept()
             .setCoding(Collections.singletonList(new Coding("http://hl7.org/fhir/sid/cvx", "140", "Influenza, seasonal, injectable, preservative free")))
          )
          .setLotNumber("123987")
          .setManufacturer(/*TODO: manufacturer oder Name der Impfung?*/)
          .setOccurrence(new GregorianCalendar(1895, Calendar.OCTOBER, 9))
          .setPerformer(Collections.singletonList(new Immunization.ImmunizationPerformerComponent(/*TODO: hier Arzt referenzieren*/)))
          //TODO: add Encounter
          .setEncounter();


       //Arztpraxis
       Organization Arztpraxis = new Organization()
          .addAlias("Schöne Praxis")
          .addAddress(
             new Address()
                .setLine(Collections.singletonList(new StringType("Max-Brauer-Allee 122")))
                .setPostalCode("22179")
                .setCity("Hamburg")
          )
          .addTelecom(new ContactPoint()
             .setSystem(ContactPoint.ContactPointSystem.PHONE)
             .setValue("040/678123"));

       //Arzt
       Practitioner doctor= new Practitioner();
       HumanName doctorsName = new HumanName();
       doctorsName.addPrefix("Dr.");
       doctorsName.addGiven("Frauke");
       doctorsName.setFamily("Lehmann");
       doctor.addName(doctorsName);
       //TODO: Unterschrift als Identifier?
       doctor.addIdentifier();
       //TODO: brauchen wir eine Organization (Arztpraxis) oder soll die Adresse + Telefon direkt an den Arzt?

       PractitionerRole doctorRole = new PractitionerRole();
       doctorRole.setPractitionerTarget(doctor).setPractitioner(new Reference(doctor));
       doctorRole.setOrganizationTarget(Arztpraxis).setOrganization(new Reference(Arztpraxis));
       doctorRole.addCode(new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/practitioner-role", "doctor",
          "A qualified/registered medical practitioner")));

      //Appointent
       Appointment appointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());

       //Encounter
       Encounter vaccineEncounter = new Encounter();
       vaccineEncounter.setStatus(Encounter.EncounterStatus.FINISHED);
       vaccineEncounter.setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
          "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."));
       vaccineEncounter.setServiceType(
          new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")));
       vaccineEncounter.setSubjectTarget(antonie).setSubject(new Reference(antonie));
       vaccineEncounter.addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor)));
       vaccineEncounter.addReasonCode(
          /*TODO: look at server which reasoncode makes sense*/
          new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/encounter-reason", "148477008", "Immunization not offered")));
       vaccineEncounter.addAppointment(new Reference(appointment));

       //Anti-Körper-Test
       Observation immunizationTest = new Observation()
          .addBasedOn(/*TODO: add Encounter here*/);

    }



    /**
     * helper for writing resource to Json-File
     * @param ctx - FHIR Context
     * @param resource - Resource to print in json
     */
    private static void exportToJsonFile(FhirContext ctx, DomainResource resource) {
        try {
            int value = new Random().nextInt();
            FileWriter fileWriter = new FileWriter(value + ".json");
            ctx.newJsonParser()
                    .setPrettyPrint(true)
                    .encodeResourceToWriter(resource, fileWriter);
        } catch (IOException exception) {
            System.out.println("An error occurred.");
            exception.printStackTrace();
        }
    }


    /**
     * Create an organization
     * @param ctx fhir context
     * @param client fhir client
     * @param name name of the organization
     */
    public static Organization createOrganization(FhirContext ctx, IGenericClient client, String name) {
        // Create an organization
        Organization Arztpraxis = new Organization();

        // add alias to organization
        Arztpraxis.addAlias(name);

        // Create the resource on the server
        MethodOutcome outcome = client
                .create()
                .resource(Arztpraxis)
                .execute();

        // Log the ID that the server assigned
        String id = outcome.getId().toString();
        Organization createdOrganization = getOrganizationById(client, id);
        exportToJsonFile(ctx, createdOrganization);
        return createdOrganization;
    }

    /**
     * gets organization by id
     * @param client
     * @param organizationId
     * @return Organization object
     */
    private static Organization getOrganizationById(IGenericClient client, String organizationId) {
        try {
            return client.read().resource(Organization.class).withId(organizationId).execute();
        } catch (ResourceNotFoundException e) {
            System.out.println("Resource not found!");
            return null;
        }
    }


    /**
     * Create Encounter
     * @param ctx fhir context
     * @param client fhir client
     */
    public static void createEncounter(FhirContext ctx, IGenericClient client) {
        // Create an Encounter
        Encounter encounter = new Encounter();

        Coding snomedCodeEncounterForSign = new Coding()
                .setCode("185346005")
                .setSystem("SNOMED-CT");
        ArrayList codeList = new ArrayList<Coding>();
        codeList.add(snomedCodeEncounterForSign);
        CodeableConcept reasonCode = new CodeableConcept()
                .setCoding(codeList)
                .setText("Immunization");
        Appointment appointment = new Appointment()
                .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());

        // add attributes to Encounter
        ArrayList reasoncodeList = new ArrayList<CodeableConcept>();
        reasoncodeList.add(reasonCode);
        ArrayList referenceList = new ArrayList<Reference>();
        referenceList.add(new Reference(appointment));
        encounter.setStatus(Encounter.EncounterStatus.PLANNED)
                .setReasonCode(reasoncodeList)
                .setAppointment(referenceList);

        // Create the resource on the server
        MethodOutcome outcome = client
                .create()
                .resource(encounter)
                .execute();

        // Log the ID that the server assigned
        String id = outcome.getId().toString();
        Encounter createdEncounter = getEncounterById(client, id);
        exportToJsonFile(ctx, createdEncounter);
    }

    /**
     * gets encounter by id
     * @param client
     * @param encounterId
     * @return Encounter object
     */
    private static Encounter getEncounterById(IGenericClient client, String encounterId) {
        try {
            return client.read().resource(Encounter.class).withId(encounterId).execute();
        } catch (ResourceNotFoundException e) {
            System.out.println("Resource not found!");
            return null;
        }
    }
}

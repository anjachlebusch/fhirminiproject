package fhir_project;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;
import ca.uhn.fhir.narrative.DefaultThymeleafNarrativeGenerator;
import ca.uhn.fhir.rest.api.MethodOutcome;
import ca.uhn.fhir.rest.client.api.IGenericClient;
import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;
import org.hl7.fhir.r4.model.*;
import org.hl7.fhir.r4.model.codesystems.ObservationCategory;

import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class FHIRUebung7 {
    public static void main(String[] args) {


        // Create a client
        FhirContext ctx = FhirContext.forR4();
        IGenericClient client = ctx.newRestfulGenericClient("https://funke.imi.uni-luebeck.de/public/fhir");

       // Create a patient
       // Version from Hannes
       // Empty Patient Instance
       Patient antonie = new Patient();

       // Identifier
       Identifier identifier = new Identifier();
       identifier.setValue("1234567890");
       identifier.setSystem("http://kh-uzl.de/fhir/patients");
       antonie.addIdentifier(identifier);

       // Official Name
       HumanName gruenlich = new HumanName();
       gruenlich.addGiven("Antonie");
       gruenlich.setFamily("Grünlich");
       gruenlich.setUse(HumanName.NameUse.OFFICIAL);
       antonie.addName(gruenlich);

       // Birthday
       Calendar cal = Calendar.getInstance();
       // CAVE: Java integer starts by 0!
       cal.set(1827, 7, 6);
       antonie.setBirthDate(cal.getTime());

       //Birthplace
       antonie.addExtension().setUrl("http://hl7.org/fhir/StructureDefinition/patient-birthPlace")
          .setValue(new StringType("Hamburg"));

       //Address
       antonie.addAddress(
          new Address()
             .setLine(Collections.singletonList(new StringType("Stresemannstraße 12")))
             .setPostalCode("22179")
             .setCity("Hamburg")
       );

       //Passport number
       antonie.addExtension().setUrl("http://acme.org/fhir/StructureDefinition/passport-number")
        .setValue(new StringType("12345ABC"));

       MethodOutcome patientOutcome = client.create().resource(antonie).prettyPrint().encodedJson().execute();
       System.out.println("Patient with ID: " + patientOutcome.getId());
       antonie.setId(patientOutcome.getId());

       //Riskfactors for immunization
       //TODO: brauchen wir Risikofaktoren?
       RiskAssessment risikoFaktoren = new RiskAssessment();

       //Blood type
       Observation bloodType = new Observation()
          .setStatus(Observation.ObservationStatus.FINAL)
          .setCategory(
             Collections.singletonList(new CodeableConcept().setCoding(
                Collections.singletonList(new Coding("http://terminology.hl7.org/CodeSystem/observation-category", "Laboratory", "The results of observations generated by laboratories. Laboratory results are typically generated by laboratories providing analytic services in areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology (including digital pathology), microbiology, and/or virology. These observations are based on analysis of specimens obtained from the patient and submitted to the laboratory."))
             ))
          )
          .setCode(
             new CodeableConcept().setCoding(
                Collections.singletonList(new Coding("http ://loinc.org", "882-1", "ABO and Rh group [Type] in Blood"))
             )
          )
          .setSubject(new Reference(antonie.getIdElement().getValue()))
          .setEffective(new DateTimeType(new GregorianCalendar(1900, Calendar.APRIL, 12)))
          .setValue(new CodeableConcept().setCoding(
             Arrays.asList(new Coding("http://snomed.info/sct", "112144000", "Blood group A (finding)"),
             new Coding("http://snomed.info/sct", "165747007", "RhD positive (finding)")))
          );

       MethodOutcome bloodTypeOutcome = client.create().resource(bloodType).prettyPrint().encodedJson().execute();
       System.out.println("Observation Blood Type with ID: " + bloodTypeOutcome.getId());
       bloodType.setId(bloodTypeOutcome.getId());

       //Arztpraxis
       Organization Arztpraxis = new Organization()
          .addAlias("Schöne Praxis")
          .addAddress(
             new Address()
                .setLine(Collections.singletonList(new StringType("Max-Brauer-Allee 122")))
                .setPostalCode("22179")
                .setCity("Hamburg")
          )
          .addTelecom(new ContactPoint()
             .setSystem(ContactPoint.ContactPointSystem.PHONE)
             .setValue("040/678123"));

       //organization
       MethodOutcome arztpraxisOutcome = client.create().resource(Arztpraxis).prettyPrint().encodedJson().execute();
       System.out.println("Organization Arztpraxis with ID: " + arztpraxisOutcome.getId());
       Arztpraxis.setId(arztpraxisOutcome.getId());

       //Arzt
       Practitioner doctor= new Practitioner();
       HumanName doctorsName = new HumanName();
       doctorsName.addPrefix("Dr.");
       doctorsName.addGiven("Frauke");
       doctorsName.setFamily("Lehmann");
       doctor.addName(doctorsName);
       //TODO: Unterschrift als Identifier?
       doctor.addIdentifier();
       //TODO: brauchen wir eine Organization (Arztpraxis) oder soll die Adresse + Telefon direkt an den Arzt?

       MethodOutcome arztOutcome = client.create().resource(doctor).prettyPrint().encodedJson().execute();
       System.out.println("Practitioner Arzt with ID: " + arztOutcome.getId());
       doctor.setId(arztOutcome.getId());

       PractitionerRole doctorRole = new PractitionerRole();
       doctorRole.setPractitionerTarget(doctor).setPractitioner(new Reference(doctor.getIdElement().getValue()));
       doctorRole.setOrganizationTarget(Arztpraxis).setOrganization(new Reference(Arztpraxis.getIdElement().getValue()));
       doctorRole.addCode(new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/practitioner-role", "doctor",
          "A qualified/registered medical practitioner")));

       MethodOutcome doctorRoleOutcome = client.create().resource(doctorRole).prettyPrint().encodedJson().execute();
       System.out.println("Practitioner Role Arzt with ID: " + doctorRoleOutcome.getId());
       doctorRole.setId(doctorRoleOutcome.getId());

      //Appointents
       Appointment vaccine1Appointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());
       vaccine1Appointment.setId(IdType.newRandomUuid());
       MethodOutcome vaccine1AppointmentOutcome = client.create().resource(vaccine1Appointment).prettyPrint().encodedJson().execute();
       System.out.println("Appointment Impfung with ID: " + vaccine1AppointmentOutcome.getId());
       vaccine1Appointment.setId(vaccine1AppointmentOutcome.getId());

       Appointment vaccine2Appointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());
       vaccine2Appointment.setId(IdType.newRandomUuid());
       MethodOutcome vaccine2AppointmentOutcome = client.create().resource(vaccine2Appointment).prettyPrint().encodedJson().execute();
       System.out.println("Appointment Impfung with ID: " + vaccine2AppointmentOutcome.getId());
       vaccine2Appointment.setId(vaccine2AppointmentOutcome.getId());

       Appointment vaccine3Appointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());
       vaccine3Appointment.setId(IdType.newRandomUuid());
       MethodOutcome vaccine3AppointmentOutcome = client.create().resource(vaccine3Appointment).prettyPrint().encodedJson().execute();
       System.out.println("Appointment Impfung with ID: " + vaccine3AppointmentOutcome.getId());
       vaccine3Appointment.setId(vaccine3AppointmentOutcome.getId());

       Appointment covidAntiGenAppointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());
       covidAntiGenAppointment.setId(IdType.newRandomUuid());
       MethodOutcome covidAntiGenAppointmentOutcome = client.create().resource(covidAntiGenAppointment).prettyPrint().encodedJson().execute();
       System.out.println("Appointment COVID AntiGen with ID: " + covidAntiGenAppointmentOutcome.getId());
       covidAntiGenAppointment.setId(covidAntiGenAppointmentOutcome.getId());

       Appointment roetelnAntiGenAppointment = new Appointment()
          .setStart(new GregorianCalendar(1846, Calendar.OCTOBER, 1).getTime());
       roetelnAntiGenAppointment.setId(IdType.newRandomUuid());
       MethodOutcome roetelnAntiGenAppointmentOutcome = client.create().resource(roetelnAntiGenAppointment).prettyPrint().encodedJson().execute();
       System.out.println("Appointment Roeteln AntiGen with ID: " + roetelnAntiGenAppointmentOutcome.getId());
       roetelnAntiGenAppointment.setId(roetelnAntiGenAppointmentOutcome.getId());

       //Encounter - Impfung1
       Encounter vaccine1Encounter = new Encounter()
         .setStatus(Encounter.EncounterStatus.FINISHED)
         .setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
          "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."))
         .setServiceType(
          new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")))
         .setSubject(new Reference(antonie.getIdElement().getValue()))
         .addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor.getIdElement().getValue())))
         .addReasonCode(
             new CodeableConcept(
                new Coding("http://snomed.info/sct", "185346005", "Encounter for sign (procedure)")
             ).setText("Immunization")
         )
         .addAppointment(new Reference(vaccine1Appointment.getIdElement().getValue()));

       MethodOutcome vaccineEncounterOutcome = client.create().resource(vaccine1Encounter).prettyPrint().encodedJson().execute();
       System.out.println("Encounter Impfung with ID: " + vaccineEncounterOutcome.getId());
       vaccine1Encounter.setId(vaccineEncounterOutcome.getId());

       //Encounter - Impfung2
       Encounter vaccine2Encounter = new Encounter()
          .setStatus(Encounter.EncounterStatus.FINISHED)
          .setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
             "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."))
          .setServiceType(
             new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")))
          .setSubject(new Reference(antonie.getIdElement().getValue()))
          .addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor.getIdElement().getValue())))
          .addReasonCode(
             new CodeableConcept(
                new Coding("http://snomed.info/sct", "185346005", "Encounter for sign (procedure)")
             ).setText("Immunization")
          )
          .addAppointment(new Reference(vaccine2Appointment.getIdElement().getValue()));

       MethodOutcome vaccine2EncounterOutcome = client.create().resource(vaccine2Encounter).prettyPrint().encodedJson().execute();
       System.out.println("Encounter Impfung with ID: " + vaccine2EncounterOutcome.getId());
       vaccine2Encounter.setId(vaccine2EncounterOutcome.getId());

       //Encounter - Impfung3
       Encounter vaccine3Encounter = new Encounter()
          .setStatus(Encounter.EncounterStatus.FINISHED)
          .setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
             "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."))
          .setServiceType(
             new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")))
          .setSubject(new Reference(antonie.getIdElement().getValue()))
          .addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor.getIdElement().getValue())))
          .addReasonCode(
             new CodeableConcept(
                new Coding("http://snomed.info/sct", "185346005", "Encounter for sign (procedure)")
             ).setText("Immunization")
          )
          .addAppointment(new Reference(vaccine3Appointment.getIdElement().getValue()));

       MethodOutcome vaccine3EncounterOutcome = client.create().resource(vaccine3Encounter).prettyPrint().encodedJson().execute();
       System.out.println("Encounter Impfung with ID: " + vaccine3EncounterOutcome.getId());
       vaccine3Encounter.setId(vaccine3EncounterOutcome.getId());

       //Encounter - Anti-Körper Röteln
       Encounter roetelnEncounter = new Encounter()
       .setStatus(Encounter.EncounterStatus.FINISHED)
       .setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
          "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."))
       .setServiceType(
          new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")))
       .setSubject(new Reference(antonie.getIdElement().getValue()))
       .addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor.getIdElement().getValue())))
       .addReasonCode(
          new CodeableConcept(
             new Coding("http://snomed.info/sct", "185346005", "Encounter for sign (procedure)")
          ).setText("anti-gen test")
       )
       .addAppointment(new Reference(roetelnAntiGenAppointment.getIdElement().getValue()));

       MethodOutcome roetelnEncounterOutcome = client.create().resource(roetelnEncounter).prettyPrint().encodedJson().execute();
       System.out.println("Encounter Roeteln with ID: " + roetelnEncounterOutcome.getId());
       roetelnEncounter.setId(roetelnEncounterOutcome.getId());

       //Encounter - Anti-Körper COVID
       Encounter covidEncounter = new Encounter()
       .setStatus(Encounter.EncounterStatus.FINISHED)
       .setClass_(new Coding("http://terminology.hl7.org/ValueSet/v3-ActEncounterCode", "AMB",
          "A comprehensive term for health care provided in a healthcare facility (e.g. a practitioneraTMs office, clinic setting, or hospital) on a nonresident basis. The term ambulatory usually implies that the patient has come to the location and is not assigned to a bed. Sometimes referred to as an outpatient encounter."))
       .setServiceType(
          new CodeableConcept(new Coding("http://hl7.org/fhir/ValueSet/service-type", "57", "Immunization")))
       .setSubject(new Reference(antonie.getIdElement().getValue()))
       .addParticipant(new Encounter.EncounterParticipantComponent().setIndividual(new Reference(doctor.getIdElement().getValue())))
       .addReasonCode(
          new CodeableConcept(
             new Coding("http://snomed.info/sct", "185346005", "Encounter for sign (procedure)")
          ).setText("anti-gen test")
       )
       .addAppointment(new Reference(covidAntiGenAppointment.getIdElement().getValue()));

       MethodOutcome covidEncounterOutcome = client.create().resource(covidEncounter).prettyPrint().encodedJson().execute();
       System.out.println("Encounter COVID with ID: " + covidEncounterOutcome.getId());
       covidEncounter.setId(covidEncounterOutcome.getId());

       // Impfung1
       Immunization Impfung1 = new Immunization()
          .setPatient(new Reference(antonie.getIdElement().getValue()))
          .setVaccineCode(new CodeableConcept()
             .setCoding(Collections.singletonList(new Coding("http://hl7.org/fhir/sid/cvx", "140", "Influenza, seasonal, injectable, preservative free")))
          )
          .setLotNumber("123987")
          .setOccurrence(new DateTimeType(new GregorianCalendar(1895, Calendar.OCTOBER, 9)))
          .setPerformer(Collections.singletonList(new Immunization.ImmunizationPerformerComponent(new Reference(doctor.getIdElement().getValue()))))
          .setEncounter(new Reference(vaccine1Encounter.getIdElement().getValue()));
          //.setManufacturer(/*TODO: manufacturer oder Name der Impfung?*/)

       MethodOutcome impfung1Outcome = client.create().resource(Impfung1).prettyPrint().encodedJson().execute();
       System.out.println("Immunization Impfung with ID: " + impfung1Outcome.getId());
       Impfung1.setId(impfung1Outcome.getId());

       // Impfung2
       Immunization Impfung2 = new Immunization()
          .setPatient(new Reference(antonie.getIdElement().getValue()))
          .setVaccineCode(new CodeableConcept()
             .setCoding(Collections.singletonList(new Coding("http://hl7.org/fhir/sid/cvx", "07", "mumps")))
          )
          .setLotNumber("123987")
          .setOccurrence(new DateTimeType(new GregorianCalendar(1895, Calendar.OCTOBER, 9)))
          .setPerformer(Collections.singletonList(new Immunization.ImmunizationPerformerComponent(new Reference(doctor.getIdElement().getValue()))))
          .setEncounter(new Reference(vaccine2Encounter.getIdElement().getValue()));
       //.setManufacturer(/*TODO: manufacturer oder Name der Impfung?*/)

       MethodOutcome impfung2Outcome = client.create().resource(Impfung2).prettyPrint().encodedJson().execute();
       System.out.println("Immunization Impfung with ID: " + impfung2Outcome.getId());
       Impfung2.setId(impfung2Outcome.getId());

       // Impfung3
       Immunization Impfung3 = new Immunization()
          .setPatient(new Reference(antonie.getIdElement().getValue()))
          .setVaccineCode(new CodeableConcept()
             .setCoding(Collections.singletonList(new Coding("http://hl7.org/fhir/sid/cvx", "67", "malaria")))
          )
          .setLotNumber("123987")
          .setOccurrence(new DateTimeType(new GregorianCalendar(1895, Calendar.OCTOBER, 9)))
          .setPerformer(Collections.singletonList(new Immunization.ImmunizationPerformerComponent(new Reference(doctor.getIdElement().getValue()))))
          .setEncounter(new Reference(vaccine3Encounter.getIdElement().getValue()));
       //.setManufacturer(/*TODO: manufacturer oder Name der Impfung?*/)

       MethodOutcome impfung3Outcome = client.create().resource(Impfung3).prettyPrint().encodedJson().execute();
       System.out.println("Immunization Impfung with ID: " + impfung3Outcome.getId());
       Impfung3.setId(impfung2Outcome.getId());

       //Anti-Körper-Test - Röteln
       Observation immunizationTestRoeteln = new Observation()
          .addCategory(
             new CodeableConcept(
                new Coding("http://terminology.hl7.org/CodeSystem/observation-category", ObservationCategory.LABORATORY.toCode(), ObservationCategory.LABORATORY.getDisplay())
             ))
          .setCode(
             new CodeableConcept(
                new Coding("http://loinc.org", "74415-1","display: Rubella virus IgG Ab [Presence] in Body fluid by Immunoassay")
             )
          )
          .setSubject(new Reference(antonie.getIdElement().getValue()))
          .addPerformer(new Reference(doctor.getIdElement().getValue()))
          .setValue(new CodeableConcept(
             new Coding("http://snomed.info/sct", "260385009", "Negative (qualifier value)")
          ).setText("Schutz nicht vorhanden"))
          .setEncounter(new Reference(roetelnEncounter.getIdElement().getValue()));

       MethodOutcome immunizationTestRoetelnOutcome = client.create().resource(immunizationTestRoeteln).prettyPrint().encodedJson().execute();
       System.out.println("Observation roeteln Test with ID: " + immunizationTestRoetelnOutcome.getId());
       immunizationTestRoeteln.setId(immunizationTestRoetelnOutcome.getId());


       //Anti-Körper-Test - COVID
       Observation immunizationTestCovid = new Observation()
          .addCategory(
             new CodeableConcept(
                new Coding("http://terminology.hl7.org/CodeSystem/observation-category", ObservationCategory.LABORATORY.toCode(), ObservationCategory.LABORATORY.getDisplay())
             ))
          .setCode(
             new CodeableConcept(
                new Coding("http://loinc.org", "95209-3", "SARS-CoV+SARS-CoV-2 (COVID-19) Ag [Presence] in Respiratory specimen by Rapid immunoassay")
             )
          )
          .setSubject(new Reference(antonie.getIdElement().getValue()))
          .addPerformer(new Reference(doctor.getIdElement().getValue()))
          .setValue(new CodeableConcept(
             new Coding("http://snomed.info/sct", "10828004", "Positive (qualifier value)")
          ).setText("Schutz vorhanden"))
          .setEncounter(new Reference(covidEncounter.getIdElement().getValue()));

       MethodOutcome immunizationTestCovidOutcome = client.create().resource(immunizationTestCovid).prettyPrint().encodedJson().execute();
       System.out.println("Observation COVID Test with ID: " + immunizationTestCovidOutcome.getId());
       immunizationTestCovid.setId(immunizationTestCovidOutcome.getId());





       //TODO: müssen wir das im Bundle machen?
    }
    //TODO: wie viele Antikörper-Tests / Impfungen



}
